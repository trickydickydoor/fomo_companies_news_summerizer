#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FOMOÊñ∞ÈóªÊëòË¶ÅÁ≥ªÁªü‰∏ªÂÖ•Âè£

ËØ•Á≥ªÁªü‰ªéSupabaseËé∑ÂèñÂÖ¨Âè∏ÂàóË°®ÔºåÂàÜÊûêÊúÄËøë24Â∞èÊó∂ÁöÑÁõ∏ÂÖ≥Êñ∞ÈóªÔºå
‰ΩøÁî®PineconeÂêëÈáèÊï∞ÊçÆÂ∫ìÊ£ÄÁ¥¢Áõ∏ÂÖ≥ÂÜÖÂÆπÔºåÂπ∂ÈÄöËøáGeminiÁîüÊàêÂàÜÊûêÊä•Âëä„ÄÇ
"""

import sys
import os
import io
import argparse
from datetime import datetime

# ËÆæÁΩÆÊ†áÂáÜËæìÂá∫ÁºñÁ†Å‰∏∫UTF-8ÔºàWindowsÂÖºÂÆπÔºâÂπ∂ÂêØÁî®Êó†ÁºìÂÜ≤ËæìÂá∫
if sys.platform == "win32":
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', line_buffering=True)
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', line_buffering=True)
else:
    # ÈùûWindowsÁ≥ªÁªü‰πüÂêØÁî®Ë°åÁºìÂÜ≤
    sys.stdout.reconfigure(line_buffering=True)

# Ê∑ªÂä†È°πÁõÆÊ†πÁõÆÂΩïÂà∞PythonË∑ØÂæÑ
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.core.analyzer import NewsAnalyzer
from src.utils.formatter import OutputFormatter

def main():
    """‰∏ªÂáΩÊï∞"""
    parser = argparse.ArgumentParser(description='FOMOÊñ∞ÈóªÊëòË¶ÅÂàÜÊûêÁ≥ªÁªü')
    parser.add_argument('--hours', type=int, default=24, 
                       help='ÂàÜÊûêÊó∂Èó¥ËåÉÂõ¥ÔºàÂ∞èÊó∂ÔºâÔºåÈªòËÆ§24Â∞èÊó∂')
    parser.add_argument('--company', type=str, 
                       help='ÂàÜÊûêÁâπÂÆöÂÖ¨Âè∏ÔºàÂèØÈÄâÔºâÔºå‰∏çÊåáÂÆöÂàôÂàÜÊûêÊâÄÊúâÂÖ¨Âè∏')
    parser.add_argument('--output', type=str, 
                       help='ËæìÂá∫Êñá‰ª∂ÂêçÔºàÂèØÈÄâÔºâÔºå‰∏çÊåáÂÆöÂàôËæìÂá∫Âà∞ÊéßÂà∂Âè∞')
    parser.add_argument('--verbose', action='store_true', 
                       help='ÊòæÁ§∫ËØ¶ÁªÜÂ§ÑÁêÜËøáÁ®ã')
    parser.add_argument('--debug', action='store_true', 
                       help='ÊòæÁ§∫Ë∞ÉËØï‰ø°ÊÅØÔºàÂåÖÊã¨‰∏≠Èó¥Êï∞ÊçÆÔºâ')
    parser.add_argument('--json', type=str, 
                       help='‰øùÂ≠òJSONÊ†ºÂºèÁöÑÂàÜÊûêÁªìÊûúÂà∞ÊåáÂÆöÊñá‰ª∂')
    parser.add_argument('--save-db', action='store_true', 
                       help='Â∞ÜÂàÜÊûêÁªìÊûú‰øùÂ≠òÂà∞SupabaseÊï∞ÊçÆÂ∫ì')
    
    args = parser.parse_args()
    
    # ÂàùÂßãÂåñÁªÑ‰ª∂
    analyzer = NewsAnalyzer(debug=args.debug)
    formatter = OutputFormatter()
    
    try:
        print("ÂêØÂä®FOMOÊñ∞ÈóªÊëòË¶ÅÂàÜÊûêÁ≥ªÁªü...")
        print(f"ÂàÜÊûêÊó∂Èó¥ËåÉÂõ¥: ÊúÄËøë {args.hours} Â∞èÊó∂")
        
        if args.company:
            # ÂàÜÊûêÂçï‰∏™ÂÖ¨Âè∏
            print(f"üéØ ÁõÆÊ†áÂÖ¨Âè∏: {args.company}")
            
            # Ëé∑ÂèñÂÖ¨Âè∏‰ø°ÊÅØ
            from src.services.supabase_service import SupabaseService
            supabase_service = SupabaseService()
            company_info = supabase_service.get_company_by_name(args.company)
            
            if not company_info:
                print(f"‚ùå Êú™ÊâæÂà∞ÂÖ¨Âè∏ {args.company} ÁöÑÊï∞ÊçÆÂ∫ìËÆ∞ÂΩï")
                return 1
            
            company_id = company_info.get('id')
            
            # Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÂàÜÊûê
            should_analyze, current_article_count = supabase_service.should_analyze_company(company_id)
            
            if should_analyze:
                print(f"‚úÖ {args.company} ÊñáÁ´†Êï∞ÈáèÊúâÂèòÂåñÔºåÂºÄÂßãÂàÜÊûê...")
                result = analyzer.analyze_single_company_with_count_update(
                    args.company, company_id, current_article_count, args.hours
                )
                if result:
                    results = [result]
                else:
                    print(f"‚ùå ÂàÜÊûêÂÖ¨Âè∏ {args.company} Â§±Ë¥•")
                    return 1
            else:
                print(f"‚è≠Ô∏è  {args.company} ÊñáÁ´†Êï∞ÈáèÊó†ÂèòÂåñÔºåË∑≥ËøáÂàÜÊûê")
                results = []
        else:
            # ÂàÜÊûêÊâÄÊúâÂÖ¨Âè∏
            print("üåê ÁõÆÊ†á: ÊâÄÊúâÂÖ¨Âè∏")
            results = analyzer.analyze_all_companies(args.hours)
        
        if not results:
            print("‚ùå Êú™Ëé∑ÂèñÂà∞‰ªª‰ΩïÂàÜÊûêÁªìÊûú")
            return 1
        
        # Ê†ºÂºèÂåñËæìÂá∫
        print("\nüìù Ê≠£Âú®Ê†ºÂºèÂåñËæìÂá∫ÁªìÊûú...")
        formatted_output = formatter.format_analysis_results(results)
        
        # JSONËæìÂá∫Â§ÑÁêÜ
        if args.json:
            import json
            try:
                with open(args.json, 'w', encoding='utf-8') as f:
                    json.dump(results, f, ensure_ascii=False, indent=2)
                print(f"‚úÖ JSONÂàÜÊûêÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞Êñá‰ª∂: {args.json}")
            except Exception as e:
                print(f"‚ùå ‰øùÂ≠òJSONÊñá‰ª∂Â§±Ë¥•: {e}")
        
        # Êï∞ÊçÆÂ∫ì‰øùÂ≠òÂ§ÑÁêÜ
        if args.save_db:
            from src.services.supabase_service import SupabaseService
            supabase_service = SupabaseService()
            
            for result in results:
                if result.get('status') == 'success':
                    company_name = result.get('company', '')
                    company_info = supabase_service.get_company_by_name(company_name)
                    if company_info:
                        company_id = company_info.get('id')
                        success = supabase_service.update_company_summary(company_id, result)
                        if success:
                            print(f"‚úÖ {company_name} ÂàÜÊûêÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞Êï∞ÊçÆÂ∫ì")
                        else:
                            print(f"‚ùå {company_name} ‰øùÂ≠òÊï∞ÊçÆÂ∫ìÂ§±Ë¥•")
                    else:
                        print(f"‚ö†Ô∏è Êú™ÊâæÂà∞ÂÖ¨Âè∏ {company_name} ÁöÑÊï∞ÊçÆÂ∫ìËÆ∞ÂΩï")
        
        # ËæìÂá∫ÁªìÊûú
        if args.output:
            # ‰øùÂ≠òÂà∞Êñá‰ª∂
            saved_file = formatter.save_to_file(formatted_output, args.output)
            if saved_file:
                print(f"‚úÖ ÂàÜÊûêÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞Êñá‰ª∂: {saved_file}")
            else:
                print("‚ùå ‰øùÂ≠òÊñá‰ª∂Â§±Ë¥•ÔºåÂ∞ÜËæìÂá∫Âà∞ÊéßÂà∂Âè∞")
                print("\n" + formatted_output)
        else:
            # ËæìÂá∫Âà∞ÊéßÂà∂Âè∞
            print("\n" + formatted_output)
        
        print(f"\nüéâ ÂàÜÊûêÂÆåÊàêÔºÅÂÖ±ÂàÜÊûê‰∫Ü {len(results)} ÂÆ∂ÂÖ¨Âè∏")
        return 0
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Áî®Êà∑‰∏≠Êñ≠Á®ãÂ∫èÊâßË°å")
        return 1
    except Exception as e:
        print(f"\nüí• Á≥ªÁªüÊâßË°åÂá∫Áé∞ÈîôËØØ: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1

def test_connections():
    """ÊµãËØïÊâÄÊúâÊï∞ÊçÆÂ∫ìËøûÊé•"""
    print("üîß ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•...")
    
    try:
        from src.config.database import get_supabase_client, get_pinecone_client, get_gemini_client
        
        # ÊµãËØïSupabaseËøûÊé•
        print("  üìä ÊµãËØïSupabaseËøûÊé•...")
        supabase = get_supabase_client()
        print("  ‚úÖ SupabaseËøûÊé•ÊàêÂäü")
        
        # ÊµãËØïPineconeËøûÊé•
        print("  üîç ÊµãËØïPineconeËøûÊé•...")
        pinecone_index = get_pinecone_client()
        stats = pinecone_index.describe_index_stats()
        print(f"  ‚úÖ PineconeËøûÊé•ÊàêÂäüÔºåÁ¥¢ÂºïÁª¥Â∫¶: {stats.get('dimension', 'N/A')}")
        
        # ÊµãËØïGeminiËøûÊé•
        print("  üß† ÊµãËØïGeminiËøûÊé•...")
        gemini = get_gemini_client()
        print("  ‚úÖ GeminiËøûÊé•ÊàêÂäü")
        
        print("üéâ ÊâÄÊúâÊï∞ÊçÆÂ∫ìËøûÊé•ÊµãËØïÈÄöËøáÔºÅ")
        return True
        
    except Exception as e:
        print(f"‚ùå ËøûÊé•ÊµãËØïÂ§±Ë¥•: {e}")
        return False

def show_usage_examples():
    """ÊòæÁ§∫‰ΩøÁî®Á§∫‰æã"""
    examples = """
üî• FOMOÊñ∞ÈóªÊëòË¶ÅÁ≥ªÁªü‰ΩøÁî®Á§∫‰æã:

1. ÂàÜÊûêÊâÄÊúâÂÖ¨Âè∏ÊúÄËøë24Â∞èÊó∂ÁöÑÊñ∞ÈóªÔºö
   python src/main.py

2. ÂàÜÊûêÊâÄÊúâÂÖ¨Âè∏ÊúÄËøë12Â∞èÊó∂ÁöÑÊñ∞ÈóªÔºö
   python src/main.py --hours 12

3. ÂàÜÊûêÁâπÂÆöÂÖ¨Âè∏ÔºàÂ¶Ç"ËãπÊûú"ÔºâÁöÑÊñ∞ÈóªÔºö
   python src/main.py --company "ËãπÊûú"

4. Â∞ÜÁªìÊûú‰øùÂ≠òÂà∞Êñá‰ª∂Ôºö
   python src/main.py --output "analysis_report.txt"

5. ÊòæÁ§∫ËØ¶ÁªÜÂ§ÑÁêÜËøáÁ®ãÔºö
   python src/main.py --verbose

6. ÊµãËØïÊï∞ÊçÆÂ∫ìËøûÊé•Ôºö
   python src/main.py --test

ÁªÑÂêà‰ΩøÁî®Ôºö
   python src/main.py --company "Ëã±‰ºüËææ" --hours 6 --output "nvidia_6h.txt" --verbose
    """
    print(examples)

if __name__ == "__main__":
    # Ê£ÄÊü•ÁâπÊÆäÂëΩ‰ª§
    if len(sys.argv) > 1:
        if '--test' in sys.argv:
            success = test_connections()
            sys.exit(0 if success else 1)
        elif '--help-examples' in sys.argv:
            show_usage_examples()
            sys.exit(0)
    
    # ÊâßË°å‰∏ªÁ®ãÂ∫è
    exit_code = main()
    sys.exit(exit_code)